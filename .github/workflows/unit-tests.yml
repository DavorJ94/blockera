name: Unit Tests

# Since Unit Tests are required to pass for each PR,
# we cannot disable them for documentation-only changes.
on:
    pull_request:
    push:
        branches:
            - main
            - 'release/**'
            - 'publisherwp/**'
    # Allow manually triggering the workflow.
    workflow_dispatch:

# Cancels all previous workflow runs for pull requests that have not completed.
concurrency:
    # The concurrency group contains the workflow name and the branch name for pull requests
    # or the commit hash for any other events.
    group: ${{ github.workflow }}-${{ github.event_name == 'pull_request' && github.head_ref || github.sha }}
    cancel-in-progress: true

jobs:
    unit-js:
        name: JavaScript
        runs-on: ubuntu-latest
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        strategy:
            fail-fast: false
            matrix:
                node: ['14']

        steps:
            - uses: actions/checkout@v3

            - name: Setup Node.js and install dependencies
              uses: ./.github/setup-node
              with:
                  node-version: ${{ matrix.node }}

            - name: Npm build
              run: npx run build

            - name: Running the tests
              run: npm run test:js

    phpcs:
        name: PHP coding standards
        runs-on: ubuntu-latest
        timeout-minutes: 20
        if: ${{ github.repository == 'publisherwp/publisher-core' || github.event_name == 'pull_request' }}

        steps:
            - name: Checkout repository
              uses: actions/checkout@v3

            - name: Set up PHP
              uses: shivammathur/setup-php@v2
              with:
                  php-version: '7.4'
                  coverage: none
                  tools: cs2pr

            # This date is used to ensure that the PHPCS cache is cleared at least once every week.
            # http://man7.org/linux/man-pages/man1/date.1.html
            - name: "Get last Monday's date"
              id: get-date
              run: echo "date=$(/bin/date -u --date='last Mon' "+%F")" >> $GITHUB_OUTPUT

            - name: Cache PHPCS scan cache
              uses: actions/cache@88522ab9f39a2ea568f7027eddc7d8d8bc9d59c8 # v3.3.1
              with:
                  path: .cache/phpcs.json
                  key: ${{ runner.os }}-date-${{ steps.get-date.outputs.date }}-phpcs-cache-${{ hashFiles('**/composer.json', 'phpcs.xml.dist') }}

            # Since Composer dependencies are installed using `composer update` and no lock file is in version control,
            # passing a custom cache suffix ensures that the cache is flushed at least once per week.
            - name: Install Composer dependencies
              uses: ramsey/composer-install@v2
              with:
                  custom-cache-suffix: ${{ steps.get-date.outputs.date }}

            - name: Make Composer packages available globally
              run: echo "${PWD}/vendor/bin" >> $GITHUB_PATH

            - name: Run PHPCS on all Publisher Core files
              id: phpcs-publisher-core
              run: phpcs --report-full --report-checkstyle=./.cache/phpcs-report.xml

            - name: Show PHPCS results in PR
              if: ${{ always() && steps.phpcs-publisher-core.outcome == 'failure' }}
              run: cs2pr ./.cache/phpcs-report.xml

            - name: Ensure version-controlled files are not modified during the tests
              run: git diff --exit-code

    # This job is deprecated but be present for compatibility reasons.
    unit-php:
        name: PHP
        runs-on: ubuntu-latest
        needs: [test-php, phpcs]
        if: ${{ always() }}
        steps:
            - name: Fail the job if the PHPUnit tests fail
              if: ${{ needs.test-php.result != 'success' }}
              run: exit 1

            - name: "Fail the job if the code doesn't conform to the coding standards"
              if: ${{ needs.phpcs.result != 'success' }}
              run: exit 1

            - name: Mark the job as passed if all the checks pass
              if: ${{ needs.test-php.result == 'success' && needs.phpcs.result == 'success' }}
              run: exit 0
