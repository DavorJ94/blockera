var publisher;!function(){"use strict";var t={678:function(t,e,r){function n(t,e){const r=t.split(".");let n=[];return r.forEach(((t,e)=>{n=function(t,e,r){if(-1!==t.indexOf("[")){return t.split("[").forEach((t=>{r.push(t.replace(/\[|\]/g,""))})),r}return r.push(t.replace(/\[|\]/g,"")),r}(t,0,n)})),function(){for(var t=arguments.length,r=new Array(t),n=0;n<t;n++)r[n]=arguments[n];return r.reduce(o,e)}(...n)}function o(t,e){const r=/\[.*\]/gi;let n,o=t[e];for(;null!==(n=r.exec(e));)n.index===r.lastIndex&&r.lastIndex++,n.forEach((t=>{t[0]=t[0].replace(/\[|\]/g,""),o=o[t[0]]}));return o}r.d(e,{prepare:function(){return n}})},413:function(t,e,r){function n(t){return n="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(t){return typeof t}:function(t){return t&&"function"==typeof Symbol&&t.constructor===Symbol&&t!==Symbol.prototype?"symbol":typeof t},n(t)}function o(t){var e=function(t,e){if("object"!==n(t)||null===t)return t;var r=t[Symbol.toPrimitive];if(void 0!==r){var o=r.call(t,e||"default");if("object"!==n(o))return o;throw new TypeError("@@toPrimitive must return a primitive value.")}return("string"===e?String:Number)(t)}(t,"string");return"symbol"===n(e)?e:String(e)}function i(t,e,r){return(e=o(e))in t?Object.defineProperty(t,e,{value:r,enumerable:!0,configurable:!0,writable:!0}):t[e]=r,t}r.r(e),r.d(e,{computedCssRules:function(){return s.Bv},createCssRule:function(){return s.Xg},default:function(){return u},injectHelpersToCssGenerators:function(){return s.W0}});var s=r(601);class u{constructor(t,e,r){let{type:n,function:o,selector:s,properties:u}=e;i(this,"name",""),i(this,"selector",""),i(this,"type","static"),i(this,"properties",{}),i(this,"blockProps",{}),i(this,"function",(()=>{})),this.name=t,this.type=n,this.selector=s,this.function=o,this.properties=u,this.blockProps=r}getPropValue(t){const{attributes:e}=this.blockProps;return t&&e[t]||e}rules(){const t=`add${this.type.charAt(0).toUpperCase()+this.type.slice(1)}Rule`;return this[t]?this[t]():""}convertToCssSelector(t){return t?`.${t.replace(/\s+/g,".")}`:""}setUniqueClassName(){this.selector&&(this.selector=this.selector.replace(/\.{{BLOCK_ID}}/g,`#block-${this.blockProps?.clientId}`).replace(/\.{{className}}/g,`.${this.convertToCssSelector(this.blockProps.attributes.className)}`))}addStaticRule(){return this.setUniqueClassName(),(0,s.Xg)(this)}addFunctionRule(){return this.getPropValue(this.name)?(this.setUniqueClassName(),this.function(this.name,this.blockProps,this)):""}}},601:function(t,e,r){r.d(e,{Bv:function(){return u},W0:function(){return s},Xg:function(){return c}});var n=r(413),o=r(678),i=r(819);const s=(t,e)=>(Object.values(e).forEach(((r,n)=>{r.forEach((r=>{"function"===r?.type&&(e[Object.keys(e)[n]]={...r,function:t[r.function]})}))})),e),u=(t,e)=>{let r="";const{cssGenerators:o=[]}=t;for(const t in o){if(!Object.hasOwnProperty.call(o,t))continue;const i=o[t];if(!i?.type)continue;r+=new n.default(t,i,e).rules()+"\n"}return r},c=t=>{if(!function(t,e){for(let r=0;r<e.length;r++)if(!t.hasOwnProperty(e[r]))return!1;return!0}(t,["selector","properties"]))return console.warn(`Style rule: ${JSON.stringify(t)} avoid css rule validation!`),"";const{properties:e=[],selector:r="",blockProps:n={}}=t;let s=[];const u=Object.keys(e),c=u.length-1;for(const t in e){if(!Object.hasOwnProperty.call(e,t))continue;const r=e[t];(0,i.isString)(r)?s.push(`${t}: ${r}${-1===r.indexOf(";")?";\n":"\n"}${c===u.indexOf(t)?"\n":""}`):console.warn(`CSS property value must be string given ${typeof r}, please double check properties.`)}return s=s.join("\n"),n?.attributes?(function(t){const e=/{{[^{}]+}}/gi,r=t.matchAll(e),n=[];for(const t of r)n.push(t[0].replace(/\{|\}/g,""));return n}(s).forEach((t=>{const e=(0,o.prepare)(t,n?.attributes);e&&(s=s.replace(t,e).replace(/\{|\}/g,""))})),`${r}{${s}}`):`${r}{${s}}`}},819:function(t){t.exports=window.lodash}},e={};function r(n){var o=e[n];if(void 0!==o)return o.exports;var i=e[n]={exports:{}};return t[n](i,i.exports,r),i.exports}r.n=function(t){var e=t&&t.__esModule?function(){return t.default}:function(){return t};return r.d(e,{a:e}),e},r.d=function(t,e){for(var n in e)r.o(e,n)&&!r.o(t,n)&&Object.defineProperty(t,n,{enumerable:!0,get:e[n]})},r.o=function(t,e){return Object.prototype.hasOwnProperty.call(t,e)},r.r=function(t){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(t,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(t,"__esModule",{value:!0})};var n=r(413);(publisher=void 0===publisher?{}:publisher).styleEngine=n}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,